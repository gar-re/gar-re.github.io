<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>windows_internals on Gar Reversing</title>
    <link>https://gar-re.github.io/tags/windows_internals/</link>
    <description>Recent content in windows_internals on Gar Reversing</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sat, 30 Sep 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://gar-re.github.io/tags/windows_internals/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Delaying Kernel Payloads by Hijacking KTIMERs &amp; KDPCs (Part 2)</title>
      <link>https://gar-re.github.io/posts/ktimer-hijack-pt2/</link>
      <pubDate>Sat, 30 Sep 2023 00:00:00 +0000</pubDate>
      
      <guid>https://gar-re.github.io/posts/ktimer-hijack-pt2/</guid>
      <description>&lt;p&gt;In this two part blog post series we present KTIMER hijacking, a novel post-exploitation technique that delays the execution of kernel-mode payloads.
In the first part whe focussed on Windows 11 timer internals and deferred procedure calls and showed that we can hijack &lt;code&gt;KTIMER&lt;/code&gt; and &lt;code&gt;KDCP&lt;/code&gt; objects to delay the execution of a function pointer. This second part focusses on implementing these findings in a proof of concept, illustrating the delay in execution of a kernel-mode payload.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Delaying Kernel Payloads by Hijacking KTIMERs &amp; KDPCs (Part 1)</title>
      <link>https://gar-re.github.io/posts/ktimer-hijack-pt1/</link>
      <pubDate>Fri, 15 Sep 2023 00:00:00 +0000</pubDate>
      
      <guid>https://gar-re.github.io/posts/ktimer-hijack-pt1/</guid>
      <description>&lt;p&gt;In this two part blog post series we present KTIMER hijacking, a novel post-exploitation technique that delays the execution of kernel-mode payloads.
This first part will focus on Windows 11 timer internals and deferred procedure calls and how we can hijack &lt;code&gt;KTIMER&lt;/code&gt; and &lt;code&gt;KDCP&lt;/code&gt; objects to delay the execution of a function pointer. The second part focusses on implementing these findings in a proof of concept, illustrating the delay in execution of a kernel-mode payload.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
